/* global Theme */
$(document).ready(function() {
  'use strict';

  // Create a new theme
  var theme = new Theme({
      name: 'untitled'
    }),
    timeoutId, _isDirty = false;

  function growl(opts) {
    opts = opts || {};

    var $growl = $('.growl').clone();

    if (!opts.title) {
      $growl.find('h5').hide();
    }

    $growl
      .appendTo('body')
      .find('.title').contents().last().replaceWith(opts.title);

    $growl
      .find('.message').text(opts.message)
      .end()
      .addClass('alert-' + (opts.type ? opts.type : 'info'))
      .slideDown('fast');

    setTimeout($growl.slideUp.bind($growl, 'fast', function() {
      $growl.remove();
    }), 3000);
  }

  function generateCSS() {
    var css = '/* Generated by Pygments CSS Theme Builder - ' +
        'https://jwarby.github.io/jekyll-pygments-themes/builder.html */\n';

    $('#builder').find('.form-group').each(function(i, group) {
      var $group = $(group);

      css += '/* ' + $group.data('description') + ' */\n';
      css += '.highlight ' + $group.attr('id') + ' {';

      $group.find('[data-property]').each(function(i, prop) {
        var $prop = $(prop),
          name = $prop.data('property'),
          val;

        switch (name) {
          case 'color.foreground':
            val = $prop.find('input').val();
            css += '\n  color: ' + (val ? val : 'transparent') + ';';
            break;
          case 'color.background':
            val = $prop.find('input').val();
            css += '\n  background-color: ' + (val ? val : 'transparent') + ';';
            break;
          case 'color.foreground':
            css += '\n  color: ' + ($prop.val() ? $prop.val() : 'transparent') + ';';
            break;
          case 'style.bold':
            css += $prop.is('.active') ? '\n  font-weight: bold;' : '';
            break;
          case 'style.italic':
            css += $prop.is('.active') ? '\n  font-style: italic;' : '';
            break;
          case 'style.underline':
            css += $prop.is('.active') ? '\n  text-decoration: underline;' : '';
            break;
        }
      });

      css += '\n}\n';
    });

    return css;
  }

  function updateDownloadLink() {
    _isDirty = true;

    theme.attr('name', $('#save_theme_name').val());
    theme.attr('definitions', themeToJSON(theme.attr('name')).definitions);

    $('#download_custom_theme')
      .attr(
        'download', theme.attr('name').toLowerCase().replace(/ /g, '_') + '.css'
      )
      .attr('href', 'data:text/css,' + encodeURIComponent(generateCSS()));
  }

  function update(target, props) {
    $('.highlight').find(target).css(props);
  }

  function loadTheme(name) {
    var $formGroups;

    if (!(theme = Theme.findOne(name))) {
      return growl({
        title: 'Could not load theme \'' + name + '\'',
        type: 'danger'
      });
    }

    $formGroups = $('#builder').find('.form-group');

    // Set name in Save modal
    $('#save_theme_name').val(name);

    // Reset current styles
    $('.highlight, form').find('*').each(function(i, el) {
      $(el).removeAttr('style');
    });
    $('[data-property^="style"]').removeClass('active');

    theme.attr('definitions').forEach(function(definition) {
      var $group = $formGroups.filter('[id="' + definition.attr('selector') + '"]'),
        map = {
          'color.foreground': definition.attr('colors').foreground,
          'color.background': definition.attr('colors').background,
          'style.bold': definition.attr('styles').bold,
          'style.italic': definition.attr('styles').italic,
          'style.underline': definition.attr('styles').underline,
        };

      Object.keys(map).forEach(function(key) {
        if (map[key]) {
          switch (key.split('.')[0]) {
            case 'color':
              $group.find('[data-property="' + key + '"]').colpickSetColor(map[key]);
              break;
            case 'style':
              $group.find('[data-property="' + key + '"]')
                .toggleClass('active', !map[key]).trigger('click');
              break;
          }
        }
      });

      _isDirty = false;
    });
  }

  function themeToJSON(name) {
    var json = {
      name: name,
      definitions: []
    };

    $('#builder').find('.form-group').each(function(i, group) {
      var $group = $(group),
        definition = {
          name: $group.find('label').text().trim(),
          selector: $group.attr('id'),
          colors: {
            background: null,
            foreground: null,
          },
          styles: {
            bold: false,
            italic: false,
            underline: false
          }
        };

      $group.find('[data-property]').each(function(i, prop) {
        var $prop = $(prop),
          name = $prop.data('property').split('.'),
          val;

        switch (name.join('.')) {
          case 'color.background':
          case 'color.foreground':
            val = $prop.find('input').val();
            val = val ? val : null;
            break;
          case 'style.bold':
          case 'style.italic':
          case 'style.underline':
            val = $prop.is('.active');
            break;
        }

        definition[name[0] + 's'][name[1]] = val;
      });

      json.definitions.push(definition);
    });

    return json;
  }

  updateDownloadLink();

  $('[data-toggle="color-picker"]').each(function(i, col) {
    $(col).colpick({
      colorScheme: 'dark',
      layout: 'hex',
      submit: false,
      onChange: function(hsb, hex, rgb, el) {
        hex = '#' + hex;

        var $btn = $(el),
          $formGroup = $btn.closest('.form-group'),
          isBackground = /background$/.test(
            $btn.closest('[data-property]').data('property')
          ),
          data = {};

        data[(isBackground ? 'background-' : '') + 'color'] = hex;

        if ($formGroup.is('.base-style')) {
          $formGroup.siblings().filter(function(i, group) {
            var cur = $(group).find('[data-property="' + $btn.data('property') + '"]')
                .find('input').val();

            return !cur || cur === $btn.find('input').val();
          }).each(function(i, group) {
            update($(group).attr('id'), data);
            $(group).find('[data-property="' + $btn.data('property') + '"]')
              .colpickSetColor(hex);
          });
        }

        update($formGroup.attr('id'), data);

        $btn
          .find('.preview').css('background', hex)
          .end()
          .find('input').val(hex);

        updateDownloadLink();
      },
      onShow: function(el) {
        $(this).closest('.btn').addClass('active');
      },
      onHide: function(el) {
        $('.btn[data-toggle="color-picker"]').removeClass('active');
      }
    });
  });

  $('.form-group').on('mouseover', function(ev) {
    var $this = $(this),
      targets = $($this.attr('id')).add(this);

    if ($this.is('.base-style') && !$this.parents('[data-group-id="general"]').length) {
      $this.siblings().each(function(i, sibling) {
        var $sibling = $(sibling);
        targets = targets.add($('.highlight ' + $sibling.attr('id')));
      });
    }

    $(targets).addClass('identify');
  }).on('mouseout', function(ev) {
    $('.identify').removeClass('identify');
  });

  updateDownloadLink();
  _isDirty = false;

  $('.highlight span').on('mouseover', function(ev) {
    $('.' + this.className).addClass('identify');
    clearTimeout(timeoutId);
    timeoutId = setTimeout(function() {
      var $identify = $('form').find('.identify');
      var $scroll = $('form').parent();

      if (!$identify.length) {
        return;
      }

      $('[data-toggle="color-picker"]').removeClass('active').colpickHide();

      $scroll.animate({
        scrollTop: $scroll.scrollTop() + $('form').find('.identify').position().top
      }, 500);
    }, 250);
  }).on('mouseout', function(ev) {
    clearTimeout(timeoutId);
    $('.identify').removeClass('identify');
  });

  $('.dropdown').on('click', 'li a', function(ev) {
    $(this).parents('.dropdown').find('.toggle-label').text($(this).text().trim());

    $(this).parent().siblings()
      .removeClass('active')
        .find('.fa-circle').removeClass('fa-circle').addClass('fa-circle-o');
    $(this).find('i').addClass('fa-circle');
  });

  $('.btn-toggle').click(function(ev) {
    $(this).toggleClass('active');
  });

  $('[data-property^="style"]').on('click', function(ev) {
    var $this = $(this),
      $formGroup = $this.closest('.form-group'),
      style = $this.data('property').split('.')[1],
      apply = $this.hasClass('active'),
      $targets = $formGroup,
      data = {};

    switch (style) {
      case 'bold':
        data['font-weight'] = apply ? 'bold' : 'normal'
        break;
      case 'italic':
        data['font-style'] = apply ? 'italic' : 'normal'
        break;
      case 'underline':
        data['text-decoration'] = apply ? 'underline' : 'none'
        break;
    }

    if ($formGroup.is('.base-style')) {
      $targets = $targets.add($formGroup.siblings());
    }

    $targets.each(function(i, group) {
      update($(group).attr('id'), data);
      $(group).find('[data-property="' + $this.data('property') + '"]')
        .toggleClass('active', apply);
    });

    updateDownloadLink();
  });

  $(document).on('submit', 'form#save_theme_form', function(ev) {
    var name = $(this).find('input#save_theme_name').val();

    theme.attr('name', name);
    theme.attr('definitions', themeToJSON(theme.attr('name')).definitions);

    theme.save(function(err) {
      if (err) {
        growl({
          title: 'Theme could not be saved',
          type: 'warning'
        });
        throw err;
      }

      growl({
        title: 'Theme successfully saved!',
        type: 'success'
      });

      $(this).parents('.modal').modal('hide');

      updateDownloadLink();

      _isDirty = false;
    }.bind(this));
  });

  $('[data-load]').click(function(ev) {
    loadTheme($(this).data('load'));
  });

  // Stop toolbar clicks from refreshing the page
  $('form').on('submit', function(ev) {
    ev.preventDefault();
  });

  $(window).bind('beforeunload', function() {
    if (_isDirty) {

      /* Allow the return to execute first, so that we get the first mousemove
       * event should the user decide to stay on the page
       */
      setTimeout(function() {
        $(document).one('mousemove', function() {
          $('#save_theme_modal').modal('show');
        });
      }, 0)

      return 'You will lose the unsaved changes to your theme!';
    }
  });

  $('[data-label]').on('click', function(ev) {
    var data = $.extend({
      category: 'editor',
      event: 'generic'
    }, $(this).data());

    ga('send', 'event', data.category, data.event, data.label);
  });
});
